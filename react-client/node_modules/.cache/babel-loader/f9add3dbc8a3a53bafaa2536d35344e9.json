{"ast":null,"code":"const PORT = process.env.PORT || 3080;\nexport function createCustomer(CustomerName) {\n  const data = {\n    CustomerName: CustomerName\n  };\n  return fetch('http://localhost:' + PORT + '/customers', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => response.json()).then(data => {\n    console.log('Success: ' + data);\n  }).catch(error => {\n    console.error('Error: ', error);\n  });\n}\nexport function getCustomers() {\n  return new Promise((res, rej) => {\n    fetch('http://localhost:' + PORT + '/customers', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      console.log('Success: ' + data);\n    }).catch(error => {\n      console.error('Error: ', error);\n    });\n  });\n}\nexport function getCustomerById(id) {\n  return new Promise((res, rej) => {\n    fetch('http://localhost:' + PORT + '/customers' + id, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      console.log('Success: ' + data);\n    }).catch(error => {\n      console.error('Error: ', error);\n    });\n  });\n}\nexport function updateCustomerById(id) {\n  return new Promise((res, rej) => {\n    fetch('http://localhost:' + PORT + '/customers' + id, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      console.log('Success: ' + data);\n    }).catch(error => {\n      console.error('Error: ', error);\n    });\n  });\n}\nexport function deleteCustomer(id) {\n  return new Promise((res, rej) => {\n    fetch('http://localhost:' + PORT + '/customers' + id, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      console.log('Success: ' + data);\n    }).catch(error => {\n      console.error('Error: ', error);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/npzap/dev/strider-general-store/react-client/src/utils/api.js"],"names":["PORT","process","env","createCustomer","CustomerName","data","fetch","method","headers","body","JSON","stringify","then","response","json","console","log","catch","error","getCustomers","Promise","res","rej","getCustomerById","id","updateCustomerById","deleteCustomer"],"mappings":"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","sourcesContent":["const PORT = process.env.PORT || 3080;\r\n\r\n\r\nexport function createCustomer(CustomerName){\r\n    const data = {CustomerName: CustomerName};\r\n\r\n    return fetch('http://localhost:' + PORT + '/customers', {\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log('Success: ' + data);\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error: ', error);\r\n    });\r\n}\r\n\r\nexport function getCustomers(){\r\n\r\n    return new Promise((res, rej) => {\r\n        fetch('http://localhost:' + PORT + '/customers', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log('Success: ' + data);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error: ', error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function getCustomerById(id){\r\n    return new Promise((res, rej) => {\r\n        fetch('http://localhost:' + PORT + '/customers' + id, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log('Success: ' + data);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error: ', error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function updateCustomerById(id){\r\n    return new Promise((res, rej) => {\r\n        fetch('http://localhost:' + PORT + '/customers' + id, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log('Success: ' + data);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error: ', error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function deleteCustomer(id){\r\n    return new Promise((res, rej) => {\r\n        fetch('http://localhost:' + PORT + '/customers' + id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log('Success: ' + data);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error: ', error);\r\n            });\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}