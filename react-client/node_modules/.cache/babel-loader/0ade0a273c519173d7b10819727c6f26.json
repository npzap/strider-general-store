{"ast":null,"code":"const PORT = process.env.PORT || 3080;\nexport function loginUser(username, password) {\n  const data = {\n    username: username,\n    password: password\n  };\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:' + PORT + '/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(data => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nexport function addCustomer(CustomerName, authToken) {\n  const data = {\n    CustomerName: CustomerName\n  };\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:' + PORT + '/customers', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + authToken\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(data => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nexport function getCustomers(authToken) {\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:' + PORT + '/customers', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nexport function addItem(name, price, authToken) {\n  const data = {\n    ItemName: name,\n    Price: price\n  };\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:' + PORT + '/items', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(data => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nexport function getItems(authToken) {\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:' + PORT + '/items', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nexport function updateItemById(id, authToken) {\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:' + PORT + '/items' + id, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nexport function getOrders(authToken) {\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:' + PORT + '/orders', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\nexport function addOrder(id, date, total, authToken) {\n  const data = {\n    CustomerId: id,\n    Date: date,\n    Total: total\n  };\n  return new Promise((resolve, reject) => {\n    fetch('http://localhost:' + PORT + '/orders', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(data => {\n      resolve(data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/npzap/dev/strider-general-store/react-client/src/utils/api.js"],"names":["PORT","process","env","loginUser","username","password","data","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","then","response","json","catch","error","addCustomer","CustomerName","authToken","getCustomers","addItem","name","price","ItemName","Price","getItems","updateItemById","id","getOrders","addOrder","date","total","CustomerId","Date","Total"],"mappings":"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","sourcesContent":["const PORT = process.env.PORT || 3080;\r\n\r\nexport function loginUser(username, password){\r\n    const data = {\r\n        username: username,\r\n        password: password\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n       fetch('http://localhost:' + PORT + '/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function addCustomer(CustomerName, authToken){\r\n    const data = {CustomerName: CustomerName};\r\n\r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:' + PORT + '/customers', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + authToken\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function getCustomers(authToken){\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:' + PORT + '/customers', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function addItem(name, price, authToken){\r\n    const data = {\r\n        ItemName: name,\r\n        Price: price\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:' + PORT + '/items', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function getItems(authToken){\r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:' + PORT + '/items', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function updateItemById(id, authToken){\r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:' + PORT + '/items' + id, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function getOrders(authToken){\r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:' + PORT + '/orders', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function addOrder(id, date, total, authToken){\r\n    const data = {\r\n        CustomerId: id,\r\n        Date: date,\r\n        Total: total\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n        fetch('http://localhost:' + PORT + '/orders', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}